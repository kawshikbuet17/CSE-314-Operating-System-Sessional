diff --git a/Makefile b/Makefile
index 09d790c..ba4a38f 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_childpro\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +218,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -251,6 +252,7 @@ EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
+	childpro.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/childpro.c b/childpro.c
new file mode 100644
index 0000000..a990bc8
--- /dev/null
+++ b/childpro.c
@@ -0,0 +1,100 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+#include "pstat.h"
+
+int main(int argc, char * argv[])
+{
+    int pid;
+    int n = atoi(argv[1]);
+    int pidArr[n];
+    settickets(50);
+
+    for(int i = 0; i < n; i++) {
+        pid = fork();
+        if(pid < 0) {
+            // this is the error branch
+            printf(1, "process : %d ; failed to reproduce\n", getpid());
+        }
+        else if(pid > 0) {
+            pidArr[i] = pid;
+            // this is the parent branch
+            printf(1, "process : %d ; created child : %d\n", getpid(), pid);
+            // wait(); // wait for the children to return
+        }
+        else {
+            // this is the children branch
+            printf(1, "process : %d ; is a child\n", getpid());
+            int t = 1;
+            if(argc >= 2) {
+                t = atoi(argv[i+2]);
+                
+            }
+            if(i%2!=0){
+                settickets(t);
+                printf(1, "%d tickets set to child : %d", t, getpid());
+            }
+            else{
+                printf(1, "parent's tickets set to child : %d", getpid());
+            }
+
+            for(;;) {
+                ;
+                // do nothing
+            }
+            
+        }
+        
+    }
+    int x = 0;
+    for(int k = 0; k<=100000000; k++) {
+        x = x-k + 3.14*89.64;
+        // do nothing
+    }
+    printf(1, "\nx=%d\n", x);
+
+    struct pstat *p = malloc (sizeof(struct pstat));
+
+    printf(1, "\nBEFORE\n");
+    int check;
+    check = getpinfo(p);
+    // printf(1, "check %d \n", check);
+    printf(1, "Id\t\tTickets\t\t Ticks\n");
+    if(check == 0){
+        for(int i = 0; i < NPROC; i++){
+            if(p->inuse[i])
+                printf(1, "%d \t\t %d \t\t %d\n", p->pid[i], p->tickets[i], p->ticks[i]);
+            
+        }
+    }
+
+    for(int k = 0; k<=100000000; k++) {
+        x = x+k - 3.14*89.64;
+        // do nothing
+    }
+    printf(1, "\nx=%d\n", x);
+
+    struct pstat *p1 = malloc (sizeof(struct pstat));
+
+    printf(1, "\nAFTER\n");
+    check = getpinfo(p1);
+    // printf(1, "check %d \n", check);
+    printf(1, "Id\t\tTickets\t\t Ticks\n");
+    if(check == 0){
+        for(int i = 0; i < NPROC; i++){
+            if(p1->inuse[i])
+                printf(1, "%d \t\t %d \t\t %d\n", p1->pid[i], p1->tickets[i], p1->ticks[i]-p->ticks[i]);
+            
+        }
+    }
+
+
+    for (int i = 0; i < n; ++i) {
+        kill(pidArr[i]);
+    }
+    for (int i = 0; i < n; ++i) {
+        wait();
+    }
+    exit();
+}
\ No newline at end of file
diff --git a/proc.c b/proc.c
index 806b1b1..8dce647 100644
--- a/proc.c
+++ b/proc.c
@@ -6,12 +6,53 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "pstat.h"
+
+#define PHI 0x9e3779b9
+
+static uint Q[4096];
+
+unsigned lfsr = 0xACE1u;
+unsigned bit;
+
+
+void srand(uint x)
+{
+  int i;
+
+  Q[0] = x;
+  Q[1] = x + PHI;
+  Q[2] = x + PHI + PHI;
+
+  for (i = 3; i < 4096; i++)
+    Q[i] = Q[i - 3] ^ Q[i - 2] ^ PHI ^ i;
+}
+
+uint rand(void)
+{
+  bit  = ((lfsr >> 0) ^ (lfsr >> 2) ^ (lfsr >> 3) ^ (lfsr >> 5) ) & 1;
+  return lfsr =  (lfsr >> 1) | (bit << 15);
+}
 
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
 } ptable;
 
+int
+settickets(struct proc* p, int number)
+{
+  if(number <= 0)  
+    return -1;
+
+  acquire(&ptable.lock);
+  p->tickets = number;
+  release(&ptable.lock);
+
+  return 0;
+}
+
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -88,6 +129,10 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;
+  p->ticks = 0;
+  p->ticks1 = 0;
+  p->ticks2 = 0;
 
   release(&ptable.lock);
 
@@ -199,6 +244,8 @@ fork(void)
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
+  settickets(np, curproc->tickets);
+  np->ticks = 0;
 
   // Clear %eax so that fork returns 0 in the child.
   np->tf->eax = 0;
@@ -319,36 +366,79 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+
+int totalTickets = 0;
+
+int gettotalTickets(void)
+{
+  int sum = 0;
+  struct proc * p ;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == RUNNABLE) sum += p->tickets;
+  }
+  release(&ptable.lock);
+  return sum;
+}
+
 void
 scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+
+  static _Bool have_seeded = 0;
+  const int seed = 1323;
+  if(!have_seeded)
+  {
+    srand(seed);
+    have_seeded = 1;
+  }
+
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
+    // cprintf("Total Tickets = %d\n", totalTickets);
+    if(gettotalTickets()==0) continue;
+      // cprintf("total = %d\n", gettotalTickets());
+    int win_ticket = rand()%gettotalTickets();
+    // cprintf("\nWin Ticket = %d\n", win_ticket);
     acquire(&ptable.lock);
+    int cnt = 0;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      cnt += p->tickets;
+      if(win_ticket > cnt) continue;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
+      p->inuse = 1;
+
+      acquire(&tickslock);
+      p->ticks1 = ticks;
+      release(&tickslock);
 
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
+      acquire(&tickslock);
+      p->ticks2 = ticks;
+      p->ticks += p->ticks2-p->ticks1;
+      // cprintf("%d -- %d\n", p->pid, p->ticks);
+      release(&tickslock);
+
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      break;
     }
     release(&ptable.lock);
 
@@ -532,3 +622,28 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+
+int
+getpinfo(struct pstat *target)
+{
+  acquire(&ptable.lock);
+  struct proc* p;
+  for(p=ptable.proc;p != &(ptable.proc[NPROC]); p++)
+  {
+    const int index = p - ptable.proc;
+    if(p->state != UNUSED)
+    {
+      target->pid[index] = p->pid;
+      target->ticks[index] = p->ticks;
+      target->tickets[index] = p->tickets;
+      target->inuse[index] = p->inuse;
+    }
+    else
+    {
+      target->inuse[index] = 0;
+    }
+  }
+  release(&ptable.lock);
+  return 0;
+}
diff --git a/proc.h b/proc.h
index 1647114..3942d12 100644
--- a/proc.h
+++ b/proc.h
@@ -24,6 +24,9 @@ extern int ncpu;
 // The layout of the context matches the layout of the stack in swtch.S
 // at the "Switch stacks" comment. Switch doesn't save eip explicitly,
 // but it is on the stack and allocproc() manipulates it.
+
+
+
 struct context {
   uint edi;
   uint esi;
@@ -49,6 +52,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  uint ticks1;
+  uint ticks2;
+  uint ticks;
+  int tickets;
+  int inuse;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..aa89a2d
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,22 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+
+#include "param.h"
+
+
+struct pstat {
+
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+
+  int tickets[NPROC]; // the number of tickets this process has
+
+  int pid[NPROC];     // the PID of each process
+
+  int ticks[NPROC];   // the number of ticks each process has accumulated
+
+};
+
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..0ed9b58 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]  sys_settickets,
+[SYS_getpinfo]  sys_getpinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..83ec274 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets    22
+#define SYS_getpinfo    23
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..118af8e 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,10 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
+
+extern int settickets(struct proc* p, int number);
+extern int getpinfo(struct pstat * target);
 
 int
 sys_fork(void)
@@ -89,3 +93,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+int
+sys_settickets(void)
+{
+  int number;
+  argint(0, &number);
+  return settickets(myproc(), number);
+}
+
+int sys_getpinfo(void)
+{
+  struct pstat* target;
+  argptr(0,(void*)&target,sizeof(*target));
+  return getpinfo(target);
+}
diff --git a/user.h b/user.h
index 4f99c52..5b0a508 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -23,6 +24,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..e059e8a 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
\ No newline at end of file
